{
  "name": "supertype",
  "description": "A type system for classical inheritence, mix-ins and composition.",
  "homepage": "https://github.com/selsamman/supertype",
  "version": "0.1.12",
  "devDependencies": {
    "q": "1.x"
  },
  "directories": {},
  "engines": {
    "node": ">=0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/selsamman/supertype.git"
  },
  "bugs": {
    "url": "http://github.com/selsamman/supertype/issues"
  },
  "optionalDependencies": {},
  "readme": "# superType\r\n## Purpose\r\nsuperType is a type system for javascript that supports\r\n\r\n- Classical inheritence\r\n\r\n- Mixins\r\n\r\n- Composition including collections\r\n\r\n## Installation\r\nInclude lib/index.js for use in the browser.  Install on node via  npm:\r\n\r\n    npm install supertype\r\n\r\nIt is automatically installed as a dependency for Amorphic\r\n## Example\r\nClasses are defined as \"templates\".\r\n\r\n    ObjectTemplate = require('supertype');\r\n\r\n    Animal = ObjectTemplate.create(\"Animal\",\r\n    {\r\n        name: {type: String},\r\n        isMammal: {type: Boolean, value: true},\r\n        legs: {type: Number, value: 2}\r\n    });\r\n\r\n    Lion = Animal.extend(\"Lion\",\r\n    {\r\n        init: function () {\r\n            Animal.call(this);\r\n            this.name = \"Lion\";\r\n            this.legs = 4;\r\n        },\r\n        canRoar: function () {return true}\r\n    });\r\n\r\n    Bear = Animal.extend(\"Bear\",\r\n    {\r\n        init: function () {\r\n            Animal.call(this);\r\n            this.name = \"Bear\";\r\n        },\r\n        canHug: function () {return true}\r\n    });\r\n\r\n    Ark = ObjectTemplate.create(\"Ark\",\r\n    {\r\n        animals: {type: Array, of: Animal, value: []},\r\n        board: function (animal) {\r\n            animal.ark = this;\r\n            this.animals.push(animal)\r\n        }\r\n    });\r\n    Animal.mixin(\r\n    {\r\n        ark:    {type: Ark}\r\n    });\r\n\r\nYou create objects using new\r\n\r\n    var ark1 = new Ark();\r\n    ark1.board(new Lion());\r\n    ark1.board(new Bear());\r\n\r\n    var ark2 = new Ark();\r\n    ark2.board(new Lion());\r\n    ark2.board(new Bear());\r\n\r\n\r\nBecause superType knows about the interrelationships between your objects you can serialize and de-serialize even though you have circular references\r\n\r\n\r\n    var serialArk1 = ark1.toJSONString();\r\n    var serialArk2 = ark2.toJSONString();\r\n    ark1 = Ark.fromJSON(serialArk1);\r\n    ark2 = Ark.fromJSON(serialArk2);\r\n\r\n## License\r\n\r\nsuperType is licensed under the MIT license\r\n\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "dependencies": {},
  "_id": "supertype@0.1.12",
  "_from": "supertype@0.1.x"
}
