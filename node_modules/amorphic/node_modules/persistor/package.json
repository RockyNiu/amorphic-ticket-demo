{
  "name": "persistor",
  "description": "A subclass of supertype that serializes to and reconstitutes from mongodb",
  "homepage": "https://github.com/selsamman/persistor",
  "version": "0.1.22",
  "dependencies": {
    "q": "1.x",
    "supertype": "0.1.x",
    "mongodb": "1.x"
  },
  "directories": {},
  "engines": {
    "node": ">=0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/selsamman/persistor.git"
  },
  "bugs": {
    "url": "http://github.com/selsamman/persistor/issues"
  },
  "optionalDependencies": {},
  "readme": "# persistor\r\n\r\n## Purpose\r\n\r\nperistor is a subclass of superType that serializes to and reconstitutes from mongoDB\r\n\r\n## Installation\r\n\r\nIt is automatically installed as a dependency for Amorphic\r\n\r\n## Example\r\n\r\nFirst create some object templates (many-to-many example) \r\n\r\n    var ObjectTemplate = require('supertype');\r\n    var PersistObjectTemplate = require('persitor')(ObjectTemplate, null, ObjectTemplate);\r\n\r\n    var Customer = PersistObjectTemplate.create(\"customer:Customer\", {\r\n        email:\t\t{type: String, value: \"\", length: 50, rule: [\"text\", \"email\", \"required\"]},\r\n        firstName:  {type: String, value: \"\", length: 40, rule: [\"name\", \"required\"]},\r\n        middleName: {type: String, value: \"\", length: 40, rule: \"name\"},\r\n        lastName:\t{type: String, value: \"\", length: 40, rule: [\"name\", \"required\"]},\r\n    });\r\n    \r\n    var Account = PersistObjectTemplate.create(\"account:Account\", {\r\n        init:       function (number, title, customer) {\r\n            this.number = number;\r\n            this.title = title;\r\n            if (customer)\r\n                this.addCustomer(customer);\r\n        },\r\n        addCustomer: function(customer, relationship) {\r\n            var role = new Role(customer, this, relationship);\r\n            this.roles.push(role);\r\n            customer.roles.push(role);\r\n        },\r\n        number:     {type: Number},\r\n        title:      {type: Array, of: String, max: 4},\r\n    });\r\n\r\n    var Role = PersistObjectTemplate.create(\"role:Role\", {\r\n        init:       function (customer, account, relationship) {\r\n            this.customer = customer;\r\n            this.account = account;\r\n            if (relationship)\r\n                this.relationship = relationship;\r\n        },\r\n        relationship: {type: String, value: \"primary\"},\r\n        customer:     {type: Customer}\r\n    });\r\n\r\n    Customer.mixin({\r\n        roles:      {type: Array, of: Role, value: [], fetch: true}\r\n    });\r\n    \r\n    Account.mixin({\r\n        roles:      {type: Array, of: Role, value: [], fetch: true}\r\n    });\r\n  \r\nNext you need a schema but this schema only defines the foreign key relationships\r\n   \r\n    var collections = {\r\n        customer: {\r\n            children: {\r\n                roles: {template: Role, id:\"customer_id\"}\r\n            }\r\n        },\r\n        account: {\r\n            children: {\r\n                roles: {id:\"account_id\"}\r\n            }\r\n        },\r\n        role: {\r\n            parents: {\r\n                customer: {id: 'customer_id'},\r\n                account: {id: 'account_id'}\r\n            }\r\n        },\r\n    };\r\n\r\nIn the schema, the high level properties, customer, account and role are the names of the documents and must match the\r\nnames of the documents in the template definition which is always <document-name>:<template-name>\r\n\r\n    var Role = PersistObjectTemplate.create(\"role:Role\", {\r\n\r\nThen open your database and set the schema\r\n\r\n    return Q.ninvoke(MongoClient, \"connect\", \"mongodb://localhost:27017/testpersist\").then(function (db) {\r\n        PersistObjectTemplate.setDB(db);\r\n        PersistObjectTemplate.setSchema(collections);\r\n        return Q(db);\r\n    }).then ....;\r\n\r\nCreate some objects\r\n\r\n    var sam = new Customer(\"Sam\", \"M\", \"Elsamman\");\r\n    var karen = new Customer(\"Karen\", \"\", \"Burke\");\r\n    var account = new Account(123, ['Sam Elsamman', 'Karen Burke'], sam);\r\n    account.addCustomer(karen, \"joint\");\r\n\r\nPersist the top level and any connected dirty objects will automatically persist as well, managing all foreign\r\nkeys needed to maintain the relationships.\r\n\r\n    sam.persistSave().then(function() {\r\n        // id inserted after saving\r\n        return Q(sam._id);\r\n    }).then ....\r\n\r\nAnd retrieve stuff back by id, cascading down to fetch the roles as well.\r\n\r\n    Customer.getFromPersistWithId(customer_id, {roles: true}).then (function (customer) {\r\n        // Customer object complete with collection of role objects fetched and instantiated\r\n    });\r\n        \r\nOr fetch with a query\r\n\r\n    Customer.getFromPersistWithQuery({lastName: \"Elsamman\"}, {roles: true}).then (function (customer) {\r\n        // Customer object complete with collection of role objects fetched and instantiated\r\n    });\r\n\r\nThe account object connected to the fetched role is also automatically when a role is fetched because the template specified\r\n{fetch: true}.  Had it not been specified you would manually fetch the related account object like this\r\n\r\n    Customer.getFromPersistWithId(customer_id, {roles: true}).then (function (customer) {\r\n        customer.role[0].fetch({account: true}).then(function() {\r\n            // Now you can reference customer.role[0].account\r\n        });\r\n    });\r\n\r\n## License\r\n\r\nsuperType is licensed under the MIT license\r\n\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "persistor@0.1.22",
  "_from": "persistor@0.1.x"
}
